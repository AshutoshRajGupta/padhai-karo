/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

int getlength(Node *&head)
{
  Node *temp = head;
  int cnt = 0;
  while (temp != NULL)
  {
    temp = temp->next;
    cnt++;
  }
  return cnt;
}

Node *kReverse(Node *head, int x) {
  // base call
  int cnt = getlength(head);

  if (cnt < x)

  {

    return head;
  }
  if (head == NULL) {
    return NULL;
  }

  // step1: reverse first k nodes
  Node *next = NULL;
  Node *curr = head;
  Node *prev = NULL;
  int count = 0;

  while (curr != NULL && count < x) {
    next = curr->next;
    curr->next = prev;
    prev = curr;
    curr = next;
    count++;
  }

  // step2: Recursion dekhlega aage ka
  if (next != NULL) {
    head->next = kReverse(next, x);
  }

  // step3: return head of reversed list
  return prev;
}
