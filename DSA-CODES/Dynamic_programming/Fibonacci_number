// solution using spcae optimization sc=o(1)

#include<bits/stdc++.h>
using namespace std;
int main()
{
       int n;
       cin>>n;
       int prev1=1;
       int prev2=0;
       for(int i=2;i<=n;i++){
               int curr=prev1+prev2;
               //shifting
               prev2=prev1;
               prev1=curr;
       }
       cout<<prev1<<endl;
       return 0;
}

// using tabulation better than 100% solution on coding ninjas


#include<bits/stdc++.h>
using namespace std;

int main()
{
       int n;
       cin>>n;
       // step1
       vector<int> dp(n+1);
       // step2  base case
       dp[1]=1;
       dp[0]=0;
       //step 3
       for(int i=2;i<=n;i++){
               dp[i]=dp[i-1]+dp[i-2];
       }
       cout<<dp[n]<<endl;
}


// leetcode solution
class Solution {
public:
    int fib(int n) {
        // base case
        if (n <= 1) {
            return n;
        }
        vector<int> dp(n + 1);
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
};
